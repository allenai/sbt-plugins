<scalastyle>
  <name>Aristo Scalastyle config.</name>
  <!--
    See http://www.scalastyle.org/rules-0.5.0.html for a list of supported checks.

    The bottom of this file has disabled checks; also see the RegexChecker below, which can be
    repeated for arbitrary regular-expression style checking.

    Note that all checks need a customMessage field in order to display useful messages to the user.


    To disable scalastyle warnings for a block of code, bound it in comments like:
      // scalastyle:off
      bad_code()
      // scalastyle:on

    Note that *no spaces* can happen after the `:` - this is different than with scalariform!

    You can also disable on a single line with a postfix comment:

      bad_code() // scalastyle:ignore
  -->

  <!-- Example regular expression checker. This is the most flexible checker available. -->
  <check level="error" class="org.scalastyle.file.RegexChecker" enabled="false">
    <customMessage>No println statements</customMessage>
    <parameters>
      <parameter name="regex">println</parameter>
    </parameters>
  </check>

  <!-- Enabled checks. -->

  <!-- Error level checks (strictly not allowed). -->
  <check level="error" class="org.scalastyle.scalariform.IllegalImportsChecker" enabled="true">
    <parameters>
      <parameter name="illegalImports">scala.collection.JavaConversions._</parameter>
    </parameters>
  </check>
  <check level="error" class="org.scalastyle.file.FileTabChecker" enabled="true">
    <customMessage>Tab in Scala file</customMessage>
  </check>
  <check level="error" class="org.scalastyle.scalariform.EqualsHashCodeChecker" enabled="true">
    <customMessage>Classes must override both equals and hashCode, not just one</customMessage>
  </check>
  <check level="error" class="org.scalastyle.scalariform.CovariantEqualsChecker" enabled="true">
    <customMessage>equals defined without overriding equals(other: Any)</customMessage>
  </check>
  <check level="error" class="org.scalastyle.scalariform.IfBraceChecker" enabled="true">
    <customMessage>Multi-line if / else statements must have braces</customMessage>
    <parameters>
      <parameter name="singleLineAllowed">true</parameter>
      <parameter name="doubleLineAllowed">false</parameter>
    </parameters>
  </check>
  <check level="error" class="org.scalastyle.scalariform.SpacesAfterPlusChecker" enabled="true">
    <customMessage>Space missing after +</customMessage>
  </check>
  <check level="error" class="org.scalastyle.scalariform.SpacesBeforePlusChecker" enabled="true">
    <customMessage>Space missing before +</customMessage>
  </check>
  <check level="error" class="org.scalastyle.scalariform.NoWhitespaceBeforeLeftBracketChecker" enabled="true">
    <customMessage>Space present before [</customMessage>
  </check>
  <check level="error" class="org.scalastyle.scalariform.NoWhitespaceAfterLeftBracketChecker" enabled="true">
    <customMessage>Space present after [</customMessage>
  </check>

  <!-- Warning checks. -->

  <!-- Code formatting. -->
  <!--
    Line length warning only because scalariform won't auto-fix this, and will in fact break this
    rule if you're not careful.

    We use a custom ID to enable easy disabling.
    -->
  <check level="error" class="org.scalastyle.file.FileLineLengthChecker" enabled="true"
      customId="line.length">
    <customMessage>Line is more than 100 characters long</customMessage>
    <parameters>
      <parameter name="maxLineLength">100</parameter>
      <parameter name="tabSize">4</parameter>
    </parameters>
  </check>
  <!-- Bad style checks. -->
  <check level="error" class="org.scalastyle.scalariform.ClassNamesChecker" enabled="true">
    <customMessage>Unusual class name; consider renaming</customMessage>
    <parameters>
      <parameter name="regex">^[A-Z][A-Za-z]*</parameter>
    </parameters>
  </check>
  <check level="error" class="org.scalastyle.scalariform.PackageObjectNamesChecker" enabled="true">
    <customMessage>Unusual package name; consider renaming</customMessage>
    <parameters>
      <parameter name="regex">^[a-z][A-Za-z]*$</parameter>
    </parameters>
  </check>
  <check level="error" class="org.scalastyle.scalariform.UppercaseLChecker" enabled="true">
    <customMessage>Prefer using `L` to postfix long literals instead of `l`</customMessage>
  </check>

  <!-- Retired Checks -->

  <!-- retired because scalariform doesn't remove whitespace from comments. -->
  <!-- TODO: re-enable when https://github.com/jkinkead/scalariform/issues/3 closed. -->
  <check level="error" class="org.scalastyle.file.WhitespaceEndOfLineChecker" enabled="false">
    <customMessage>Whitespace at end-of-line</customMessage>
  </check>

  <check level="error" class="org.scalastyle.file.NewLineAtEofChecker" enabled="false">
    <customMessage>Missing newline at end-of-file</customMessage>
  </check>
  <check level="error" class="org.scalastyle.scalariform.ObjectNamesChecker" enabled="false">
    <customMessage>Unusual object name; consider renaming</customMessage>
    <parameters>
      <parameter name="regex">^[A-Z][A-Za-z]*</parameter>
    </parameters>
  </check>
  <check level="error" class="org.scalastyle.scalariform.PublicMethodsHaveTypeChecker" enabled="false">
    <customMessage>Missing return type for public method</customMessage>
  </check>

  <!-- Disabled checks, kept here for documentation. -->

  <!-- TODO(jkinkead): Evaluate this checker - it seems useful. -->
  <check level="error" class="org.scalastyle.scalariform.CyclomaticComplexityChecker" enabled="false">
    <parameters>
      <parameter name="maximum">10</parameter>
    </parameters>
  </check>

  <check level="error" class="org.scalastyle.scalariform.MagicNumberChecker" enabled="false">
    <customMessage>Magic integer literal in expression; should be read from a named constant</customMessage>
    <parameters>
      <parameter name="ignore">-1,0,1,2,3</parameter>
    </parameters>
  </check>
  <check level="error" class="org.scalastyle.file.FileLengthChecker" enabled="false">
    <parameters>
      <parameter name="maxFileLength">800></parameter>
    </parameters>
  </check>
  <check level="error" class="org.scalastyle.file.HeaderMatchesChecker" enabled="false">
    <parameters>
      <parameter name="header">// Copyright (C) 2011-2012 the original author or authors.</parameter>
    </parameters>
  </check>
  <check level="error" class="org.scalastyle.scalariform.ParameterNumberChecker" enabled="false">
    <parameters>
      <parameter name="maxParameters">8</parameter>
    </parameters>
  </check>
  <check level="error" class="org.scalastyle.scalariform.ReturnChecker" enabled="false"></check>
  <check level="error" class="org.scalastyle.scalariform.NullChecker" enabled="false"></check>
  <check level="error" class="org.scalastyle.scalariform.NoCloneChecker" enabled="false"></check>
  <check level="error" class="org.scalastyle.scalariform.NoFinalizeChecker" enabled="false"></check>
  <check level="error" class="org.scalastyle.scalariform.StructuralTypeChecker" enabled="false"></check>
  <check level="error" class="org.scalastyle.scalariform.NumberOfTypesChecker" enabled="false">
    <parameters>
      <parameter name="maxTypes">30</parameter>
    </parameters>
  </check>
  <check level="error" class="org.scalastyle.file.NoNewLineAtEofChecker" enabled="false"></check>
  <check level="error" class="org.scalastyle.scalariform.SimplifyBooleanExpressionChecker" enabled="false"></check>
  <check level="error" class="org.scalastyle.scalariform.NumberOfMethodsInTypeChecker" enabled="false">
    <parameters>
      <parameter name="maxMethods">30</parameter>
    </parameters>
  </check>
  <check level="error" class="org.scalastyle.scalariform.MethodNamesChecker" enabled="false">
    <parameters>
      <parameter name="regex">^[a-z][A-Za-z0-9]*$</parameter>
      <parameter name="ignoreOverride">true</parameter>
    </parameters>
  </check>
  <check level="error" class="org.scalastyle.scalariform.MethodLengthChecker" enabled="false">
    <parameters>
      <parameter name="maxLength">50</parameter>
    </parameters>
  </check>
  <check level="error" class="org.scalastyle.scalariform.IllegalImportsChecker" enabled="false">
    <parameters>
      <parameter name="illegalImports">sun._,java.awt._</parameter>
    </parameters>
  </check>
</scalastyle>
