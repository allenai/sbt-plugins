package org.allenai.plugins

import sbt.{
  relativeTo,
  settingKey,
  taskKey,
  AutoPlugin,
  Def,
  Keys,
  PathFinder,
  Plugins,
  SettingKey,
  TaskKey
}
import sbt.plugins.JvmPlugin

import java.io.File

/** Plugin for building docker images. */
object DockerBuildPlugin extends AutoPlugin {
  val AI2_PRIVATE_REGISTRY = "allenai-docker-private-docker.bintray.io"

  val DEFAULT_BASE_IMAGE = AI2_PRIVATE_REGISTRY + "/java:8"

  /** Requires the JvmPlugin, since this will be building a jar dependency tree. */
  override def requires: Plugins = JvmPlugin

  object autoImport {
    ////////////////////////////////////////////////////////////////////////////////////////////////
    // The following settings affect both the images and Dockerfiles generated by this plugin. When
    // you update these settings in a build.sbt file, you'll want to re-generate your Dockerfiles.
    ////////////////////////////////////////////////////////////////////////////////////////////////

    val dockerfileLocation: SettingKey[File] = settingKey[File](
      "The location of the Dockerfile to use in building the main project image. Defaults to " +
        "`srcDirectory.value + \"docker/Dockerfile\", typically \"src/main/docker/Dockerfile\"."
    )

    // The following three settings control how the generated image is tagged. The image portion of
    // image tags will be, for the main image:
    //   ${imageRegistryHost}/${imageNamePrefix}/${imageName}
    // and for the dependency image will be:
    //   ${imageRegistryHost}/${imageNamePrefix}/${imageName}-dependency
    //
    // See the documentation for details on which tags will be used by `dockerBuild` and
    // `dockerPush`.
    val imageRegistryHost: SettingKey[String] = settingKey[String](
      "The base name of the image you're creating. Defaults to " +
        "allenai-docker-private-docker.bintray.io ."
    )
    val imageNamePrefix: SettingKey[String] = settingKey[String](
      "The image name prefix (\"repository\", in Docker terms) of the image you're creating. " +
        "Defaults to organization.value.stripPrefix(\"org.allenai.\") . " +
        "This is typically the github repository name."
    )
    val imageName: SettingKey[String] = settingKey[String](
      "The name of the image you're creating. Defaults to the sbt project name (the `name` " +
        "setting key)."
    )

    val imageBase: SettingKey[String] = settingKey[String](
      "The base image to use when creating your image. Defaults to " + DEFAULT_BASE_IMAGE + "."
    )

    val dockerCopyMappings: SettingKey[Seq[(File, String)]] = settingKey[Seq[(File, String)]](
      "Mappings to add to the Docker image. See " +
        "http://www.scala-sbt.org/0.12.3/docs/Detailed-Topics/Mapping-Files.html for detailed " +
        "info on sbt mappings. Defaults to mapping src/main/{bin,conf} to the {bin,conf} on the " +
        "image."
    )

    val dockerWorkdir: SettingKey[String] = settingKey[String](
      "The WORKDIR value for your Dockerfile. Defaults to /local/deploy/`imageName.value`."
    )

    ////////////////////////////////////////////////////////////////////////////////////////////////
    // The following keys are for generating dockerfiles; and staging, building, running, and
    // pushing images. These should not be overridden from the defaults unless you know what you're
    // doing.
    ////////////////////////////////////////////////////////////////////////////////////////////////

    val generateDockerfile: TaskKey[Unit] = taskKey[Unit](
      "Generates a Dockerfile for the main project image at the location pointed to by " +
        "`dockerfileLocation`."
    )

    val dockerDependencyStage: TaskKey[File] = taskKey[File](
      "Builds a staged directory under target/docker/dependencies containing project " +
        "dependencies. This will include a generated Dockerfile."
    )

    val dockerMainStage: TaskKey[File] = taskKey[File](
      "Builds a staged directory under target/docker/main containing the staged project, minus " +
        "dependencies. If a Dockerfile is present in `dockerfileLocation.value`, it will be " +
        "placed in the staging directory."
    )

    val dockerBuild: TaskKey[String] = taskKey[String](
      "Builds a docker image for this project, returning the image ID. This requires that a " +
        "Dockerfile exist at `dockerfileLocation.value`."
    )

    val dockerRun: TaskKey[Unit] = taskKey[Unit](
      "Builds a docker image for this project, then runs it locally in a container."
    )

    val dockerKill: TaskKey[Unit] = taskKey[Unit](
      "Kills any currently-running docker container for this project."
    )
  }
  import autoImport._

  /** The default copy mapping, set to copy src/main/{bin,conf} to {bin,conf} in the docker image.
    */
  lazy val defaultCopyMappings = Def.setting {
    val sourceMain = Keys.sourceDirectory.value.toPath.resolve("main")
    // Copy src/main/{bin,conf} to the staging directory.
    // See http://www.scala-sbt.org/0.12.3/docs/Detailed-Topics/Mapping-Files.html
    // for more info on sbt mappings.
    Seq("bin", "conf").map { dir =>
      PathFinder(sourceMain.resolve(dir).toFile).***.pair(relativeTo(sourceMain.toFile))
    }.flatten
  }

  /** Adds the settings to configure the `dockerBuild` command. */
  override def projectSettings: Seq[Def.Setting[_]] = Seq(
    dockerfileLocation := Keys.sourceDirectory.value.toPath.resolve("docker/Dockerfile").toFile,
    imageRegistryHost := AI2_PRIVATE_REGISTRY,
    imageNamePrefix := Keys.organization.value.stripPrefix("org.allenai."),
    imageName := Keys.name.value,
    imageBase := DEFAULT_BASE_IMAGE,
    dockerCopyMappings := defaultCopyMappings.value,
    dockerWorkdir := "/local/deploy/" + imageName.value
  )
}
