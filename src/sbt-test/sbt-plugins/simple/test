# See http://eed3si9n.com/testing-sbt-plugins for sbt-scripted test syntax
# initialize a git repository to make our plugins happy
$ exec git init
# Remove any hooks (such as the formatting hook), since it in particular will cause errors.
$ exec rm -r .git/hooks
$ exec mkdir .git/hooks
$ exec git add .
$ exec git commit -m "initial commit"

> checkCompileDoesNotFormat

> checkFormat

# Make sure all our code compiles, including:
# core/src/it test code that depends on core/src/test code
> core/it:compile

# Style plugin tests.
> checkStyle
> core/styleCheckStrict
-> core/test:styleCheckStrict

# WebApp plugin tests.
-$ exists client/build/index.html
-$ exists client/node_modules
> webApp/npm:build
$ exists client/build/index.html
$ exists client/node_modules

# Test that `stage` will create a public directory and run-class.sh.
> webApp/stage
$ exists webapp/target/universal/stage/bin/run-class.sh
$ exists webapp/target/universal/stage/public
> clean

# Test it is possible to stub out the deploy NPM build
> set deployNpmBuild.in(webApp) := stubbedDeployNpmBuild.in(webApp).value
> webApp/stage
$ exists webapp/stubbed.txt

# Git-hook generation tests.
-$ exists .git/hooks/pre-commit
-$ exists .git/hooks/scalariform.jar

> generateAutoformatGitHook
$ exists .git/hooks/pre-commit
$ exists .git/hooks/scalariform.jar

# Env config generation tests.
# We can't test the full deploy process in a contained way because of the system commands involved,
# but by testing config generation we at least run through the parsing logic.
# Test generating config from within the webservice project.
-$ exists webservice/target/deploy/localhost/webservice/env.conf
> webService/generateEnvConfig test
$ exists webservice/target/deploy/localhost/webservice/env.conf
$ delete webservice/target/deploy/localhost/webservice/env.conf

# Test generation for non-configured env fails.
-> webService/generateEnvConfig notAnEnv

# Test that docker dependency staging works.
> docker/dockerDependencyStage
$ exists docker/target/docker/dependencies/Dockerfile
# Test that we get the startup script copied.
$ exists docker/target/docker/dependencies/bin/run-docker.sh
# Assert that the joda-time dependency was added.
$ exists docker/target/docker/dependencies/lib/joda-time.joda-time-2.4.jar

# Test that dockerMainStage doesn't work without a Dockerfile.
-> docker/dockerMainStage

# Test that we can generate a Dockerfile.
> docker/generateDockerfile
$ exists docker/src/main/docker/Dockerfile

# Test that additions to the Dockerfile are retained.
> docker/appendToDockerfile
> docker/generateDockerfile
$ exists docker/src/main/docker/Dockerfile
$ exec grep TESTING docker/src/main/docker/Dockerfile

# Test that docker main project staging works.
> docker/dockerMainStage
# Test that the default mappings work.
$ exists docker/target/docker/main/Dockerfile
$ exists docker/target/docker/main/conf/application.conf
# Test that the custom mappings work.
$ exists docker/target/docker/main/bar/foo.txt
$ exists docker/target/docker/main/sourcey/src.txt
# Test that the project libs are present.
$ exists docker/target/docker/main/lib/core.core-0.1-SNAPSHOT.jar
$ exists docker/target/docker/main/lib/docker.docker-0.1-SNAPSHOT.jar

# Test that we can re-run staging without error.
> docker/dockerMainStage

# Test that changes to the Dockerfile are detected.
> docker/verifyDockerfile
# Trigger a change in the file.
> set dockerPorts.in(docker) += 1234
-> docker/verifyDockerfile
