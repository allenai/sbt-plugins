import sbt._
import Keys._

import com.typesafe.web.sbt.WebPlugin
import com.typesafe.web.sbt.WebPlugin.WebKeys
import com.typesafe.jse.sbt.JsEnginePlugin
import com.typesafe.jshint.sbt.JSHintPlugin
import com.typesafe.less.sbt.LessPlugin

object SharedUiPlugin extends Plugin {

  object SharedUiKeys {
    // public
    val lessFilter = SettingKey[Option[FileFilter]]("shared-less-filter")

    // internal
    val generateWebResources = TaskKey[Seq[File]]("generate-web-resources")
    val copySharedWebResources = TaskKey[Seq[File]]("copy-shared-web-resources")
  }

  import SharedUiKeys._

  val defaults = Seq(
    SharedUiKeys.lessFilter := None,
    (LessPlugin.LessKeys.lessFilter in WebKeys.Assets) := {
      SharedUiKeys.lessFilter.value match {
        case Some(filter) => filter
        case None         => (LessPlugin.LessKeys.lessFilter in WebKeys.Assets).value
      }
    }
  )

  /** Settings for any project that creates web assets */
  val webSettings =
    WebPlugin.webSettings ++
      JsEnginePlugin.jsEngineSettings ++
      JSHintPlugin.jshintSettings ++
      LessPlugin.lessSettings ++ defaults

  /** Settings for shared UI project that will be depended upon by other UI projects */
  val sharedProjectSettings = webSettings ++ Seq(
    (compile in Compile) <<= (compile in Compile).dependsOn(copyResources in WebKeys.Assets)
  )

  /** Settings for dependent UI projects
    * Causes assets generated by sharedProject to be copied into
    * the dependent project's `/public/[namespace]` resource directory.
    *
    * @param sharedProject  the SBT project that generates shared web assets
    * @param namespace      the resource subdirectory to place the shared resources; defaults to "shared"
    */
  def dependentProjectSettings(sharedProject: Project, namespace: String = "shared") = webSettings ++ Seq(
    copySharedWebResources := {
      val baseDirectories = (resourceManaged in sharedProject in WebKeys.Assets).value :: Nil
      val newBase = (resourceManaged in Compile).value / "public" / namespace
      copyWebResources(baseDirectories, newBase)
    },
    generateWebResources := {
      val public = (resourceManaged in WebKeys.Assets).value
      public.mkdirs()
      val baseDirectories = public :: Nil
      val newBase = (resourceManaged in Compile).value / "public"
      newBase.mkdirs()
      copyWebResources(baseDirectories, newBase)
    },
    resourceGenerators in Compile <+= generateWebResources,
    resourceGenerators in Compile <+= copySharedWebResources,
    (compile in Compile) <<= (compile in Compile).dependsOn(compile in Compile in sharedProject)
  )

  /** Helper that walks the directory tree and returs list of files only */
  private def filesOnly(source: File): Seq[File] =
    if (!source.isDirectory) source :: Nil
    else Option(source.listFiles) match {
      case None        => Nil
      case Some(files) => files flatMap filesOnly
    }

  /** Helper for copying web resource files */
  private def copyWebResources(baseDirectories: Seq[File], newBase: File) = {
    val sourceFiles = baseDirectories flatMap filesOnly
    val mappings = sourceFiles pair rebase(baseDirectories, newBase)
    IO.copy(mappings, true).toSeq
  }

}
