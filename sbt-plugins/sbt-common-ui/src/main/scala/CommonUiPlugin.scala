import sbt._
import Keys._

import com.typesafe.web.sbt.WebPlugin
import com.typesafe.web.sbt.WebPlugin.WebKeys
import com.typesafe.jse.sbt.JsEnginePlugin
import com.typesafe.jse.sbt.JsEnginePlugin.JsEngineKeys
import com.typesafe.jshint.sbt.JSHintPlugin
import com.typesafe.jshint.sbt.JSHintPlugin.JshintKeys

object CommonUiPlugin extends Plugin {

  object CommonUiKeys {
    val generateWebResources = TaskKey[Seq[File]]("generate-web-resources")
    val copyCommonWebResources = TaskKey[Seq[File]]("copy-common-web-resources")
  }

  import CommonUiKeys._

  /** Settings for any project that creates web assets */
  val webSettings =
    WebPlugin.webSettings ++
      JsEnginePlugin.jsEngineSettings ++
      JSHintPlugin.jshintSettings

  /** Settings for common UI project that will be depended upon by other UI projects */
  val commonProjectSettings = webSettings ++ Seq(
    (compile in Compile) <<= (compile in Compile).dependsOn(copyResources in WebKeys.Assets)
  )

  /** Settings for dependent UI projects
    * Causes assets generated by commonProject to be copied into
    * the dependent project's `/public/common` resource directory.
    *
    * @param commonProject  the SBT project that generates common web assets
    */
  def dependentProjectSettings(commonProject: Project) = webSettings ++ Seq(
    copyCommonWebResources := {
      val baseDirectories = (resourceManaged in commonProject in WebKeys.Assets).value :: Nil
      val newBase = (resourceManaged in Compile).value / "public" / "common"
      copyWebResources(baseDirectories, newBase)
    },
    generateWebResources := {
      val public = (resourceManaged in WebKeys.Assets).value
      public.mkdirs()
      val baseDirectories = public :: Nil
      val newBase = (resourceManaged in Compile).value / "public"
      newBase.mkdirs()
      copyWebResources(baseDirectories, newBase)
    },
    resourceGenerators in Compile <+= generateWebResources,
    resourceGenerators in Compile <+= copyCommonWebResources,
    (compile in Compile) <<= (compile in Compile).dependsOn(compile in Compile in commonProject)
  )

  /** Helper that walks the directory tree and returs list of files only */
  private def filesOnly(source: File): Seq[File] =
    if (!source.isDirectory) source :: Nil
    else Option(source.listFiles) match {
      case None        => Nil
      case Some(files) => files flatMap filesOnly
    }

  /** Helper for copying web resource files */
  private def copyWebResources(baseDirectories: Seq[File], newBase: File) = {
    val sourceFiles = baseDirectories flatMap filesOnly
    val mappings = sourceFiles pair rebase(baseDirectories, newBase)
    IO.copy(mappings, true).toSeq
  }

}
